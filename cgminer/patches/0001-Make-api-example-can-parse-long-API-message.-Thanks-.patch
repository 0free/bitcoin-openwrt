From 4316a04f8fadbea6b89d4942c22f4622e04819d2 Mon Sep 17 00:00:00 2001
From: Xiangfu <xiangfu@openmobilefree.net>
Date: Tue, 12 Aug 2014 17:58:55 +0800
Subject: [PATCH] Make api-example can parse long API message. Thanks to
 Mikeqin

---
 api-example.c | 52 +++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 37 insertions(+), 15 deletions(-)

diff --git a/api-example.c b/api-example.c
index 639ffc5..5eec66c 100644
--- a/api-example.c
+++ b/api-example.c
@@ -1,5 +1,6 @@
 /*
  * Copyright 2011 Kano
+ * Copyright 2014 Mikeqin
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the Free
@@ -13,6 +14,7 @@
 
 #include "config.h"
 
+#include <assert.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -36,7 +38,7 @@
 	#define INVSOCK -1
 	#define CLOSESOCKET close
 
-	#define SOCKETINIT {}
+	#define SOCKETINIT do{}while(0)
 
 	#define SOCKERRMSG strerror(errno)
 #endif
@@ -110,7 +112,6 @@
 
 	static char *WSAErrorMsg()
 	{
-		char *msg;
 		int i;
 		int id = WSAGetLastError();
 
@@ -128,17 +129,22 @@
 
 	static WSADATA WSA_Data;
 
-	#define SOCKETINIT	int wsa; \
-				if (wsa = WSAStartup(0x0202, &WSA_Data)) { \
-					printf("Socket startup failed: %d\n", wsa); \
-					return 1; \
-				}
+	#define SOCKETINIT	do {  \
+				    int wsa; \
+				    if (wsa = WSAStartup(0x0202, &WSA_Data)) { \
+					    printf("Socket startup failed: %d\n", wsa); \
+					    return 1; \
+					}  \
+				} while (0)
 
 	#ifndef SHUT_RDWR
 	#define SHUT_RDWR SD_BOTH
 	#endif
 #endif
 
+#undef RECVSIZE
+#define RECVSIZE 65500
+
 static const char SEPARATOR = '|';
 static const char COMMA = ',';
 static const char EQ = '=';
@@ -189,16 +195,22 @@ void display(char *buf)
 
 int callapi(char *command, char *host, short int port)
 {
-	char buf[RECVSIZE+1];
+	size_t bufsz = RECVSIZE;
+	char *buf = malloc(bufsz + 1);
 	struct hostent *ip;
 	struct sockaddr_in serv;
 	SOCKETTYPE sock;
 	int ret = 0;
 	int n, p;
 
+	assert(buf);
 	SOCKETINIT;
 
 	ip = gethostbyname(host);
+	if (!ip) {
+		printf("Failed to resolve host %s\n", host);
+		return 1;
+	}
 
 	sock = socket(AF_INET, SOCK_STREAM, 0);
 	if (sock == INVSOCK) {
@@ -224,8 +236,14 @@ int callapi(char *command, char *host, short int port)
 	else {
 		p = 0;
 		buf[0] = '\0';
-		while (p < RECVSIZE) {
-			n = recv(sock, &buf[p], RECVSIZE - p , 0);
+		while (1) {
+			if (bufsz < RECVSIZE + p) {
+				bufsz *= 2;
+				buf = realloc(buf, bufsz);
+				assert(buf);
+			}
+
+			n = recv(sock, &buf[p], RECVSIZE, 0);
 
 			if (SOCKETFAIL(n)) {
 				printf("Recv failed: %s\n", SOCKERRMSG);
@@ -240,14 +258,18 @@ int callapi(char *command, char *host, short int port)
 			buf[p] = '\0';
 		}
 
-		if (ONLY)
-			printf("%s\n", buf);
-		else {
+		if (!ONLY)
 			printf("Reply was '%s'\n", buf);
+		else
+			printf("%s\n", buf);
+
+		if (!ONLY)
 			display(buf);
-		}
 	}
 
+	if (buf)
+	    free(buf);
+
 	CLOSESOCKET(sock);
 
 	return ret;
@@ -281,7 +303,7 @@ int main(int argc, char *argv[])
 		if (strcmp(argv[1], "-?") == 0
 		||  strcmp(argv[1], "-h") == 0
 		||  strcmp(argv[1], "--help") == 0) {
-			fprintf(stderr, "usAge: %s [command [ip/host [port]]]\n", argv[0]);
+			fprintf(stderr, "Usage: %s [command [ip/host [port]]]\n", argv[0]);
 			return 1;
 		}
 
-- 
1.8.3.2

